// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// isPrime
bool isPrime(unsigned long int n);
RcppExport SEXP _rprimes_isPrime(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(isPrime(n));
    return rcpp_result_gen;
END_RCPP
}
// nthPrime
unsigned long int nthPrime(int n);
RcppExport SEXP _rprimes_nthPrime(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nthPrime(n));
    return rcpp_result_gen;
END_RCPP
}
// genPrimes
std::vector<unsigned long int> genPrimes(unsigned long int max);
RcppExport SEXP _rprimes_genPrimes(SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned long int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(genPrimes(max));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rprimes_isPrime", (DL_FUNC) &_rprimes_isPrime, 1},
    {"_rprimes_nthPrime", (DL_FUNC) &_rprimes_nthPrime, 1},
    {"_rprimes_genPrimes", (DL_FUNC) &_rprimes_genPrimes, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rprimes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
